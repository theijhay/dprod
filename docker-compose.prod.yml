version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dprod-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - dprod-network

  # API Server
  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    container_name: dprod-api
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DOCKER_SOCKET_PATH=/var/run/docker.sock
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - UPLOAD_PATH=/app/uploads
      - API_URL=${API_URL}
      - NODE_ENV=production
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./uploads:/app/uploads
      - ./logs/api:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - dprod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Orchestrator Service
  orchestrator:
    build:
      context: .
      dockerfile: services/orchestrator/Dockerfile
    container_name: dprod-orchestrator
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - DOCKER_SOCKET_PATH=/var/run/docker.sock
      - NODE_ENV=production
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs/orchestrator:/app/logs
    depends_on:
      - api
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - dprod-network

  # Detection Engine
  detection-engine:
    build:
      context: .
      dockerfile: services/detection-engine/Dockerfile
    container_name: dprod-detection
    environment:
      - NODE_ENV=production
    volumes:
      - ./logs/detection:/app/logs
    restart: unless-stopped
    networks:
      - dprod-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dprod-postgres
    environment:
      - POSTGRES_DB=dprod
      - POSTGRES_USER=dprod
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
    restart: unless-stopped
    networks:
      - dprod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dprod -d dprod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dprod-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    restart: unless-stopped
    networks:
      - dprod-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregator (optional)
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: dprod-logs
    volumes:
      - ./logs:/var/log/dprod:ro
      - ./infrastructure/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    restart: unless-stopped
    networks:
      - dprod-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  dprod-network:
    driver: bridge
